[{"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\index.js":"1","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\store.js":"2","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\App.js":"4","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\productReducers.js":"5","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\orderReducers.js":"6","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\userReducers.js":"7","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\categoryReducers.js":"8","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\cartReducers.js":"9","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Footer.js":"10","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Header.js":"11","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\HomeScreen.js":"12","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductScreen.js":"13","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProfileScreen.js":"14","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\CartScreen.js":"15","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\LoginScreen.js":"16","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ShippingScreen.js":"17","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js":"18","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\UserEditScreen.js":"19","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\UserListScreen.js":"20","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderListScreen.js":"21","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductEditScreen.js":"22","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderScreen.js":"23","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductListScreen.js":"24","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\PaymentScreen.js":"25","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\Dashboard.js":"26","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\MyProducts.js":"27","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\RegisterScreen.js":"28","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\CategoryScreen.js":"29","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\SearchBox.js":"30","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Product.js":"31","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Category.js":"32","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Paginate.js":"33","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\cartConstants.js":"34","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\categoryConstants.js":"35","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\ProductCarousel.js":"36","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Loader.js":"37","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\userConstants.js":"38","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Rating.js":"39","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\orderConstants.js":"40","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Message.js":"41","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\productConstants.js":"42","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\FormContainer.js":"43","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Sidebar.js":"44","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\userActions.js":"45","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\productActions.js":"46","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\cartActions.js":"47","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\orderActions.js":"48","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\CheckoutSteps.js":"49","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\categoryActions.js":"50","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\BrandOrder.js":"51","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\BecomeVendor.js":"52","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\VendorScreen.js":"53","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\BalancePayScreen.js":"54","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\TweetsScreen.js":"55"},{"size":614,"mtime":1618825461646,"results":"56","hashOfConfig":"57"},{"size":3170,"mtime":1628263522757,"results":"58","hashOfConfig":"57"},{"size":375,"mtime":1618825461649,"results":"59","hashOfConfig":"57"},{"size":3085,"mtime":1627988906739,"results":"60","hashOfConfig":"57"},{"size":7145,"mtime":1628257091045,"results":"61","hashOfConfig":"57"},{"size":5915,"mtime":1625225532961,"results":"62","hashOfConfig":"57"},{"size":5119,"mtime":1628265356093,"results":"63","hashOfConfig":"57"},{"size":630,"mtime":1619458884184,"results":"64","hashOfConfig":"57"},{"size":1545,"mtime":1618825461648,"results":"65","hashOfConfig":"57"},{"size":375,"mtime":1618825461638,"results":"66","hashOfConfig":"57"},{"size":4469,"mtime":1622999587645,"results":"67","hashOfConfig":"57"},{"size":1799,"mtime":1623410379943,"results":"68","hashOfConfig":"57"},{"size":12777,"mtime":1628279908824,"results":"69","hashOfConfig":"57"},{"size":7361,"mtime":1625213410240,"results":"70","hashOfConfig":"57"},{"size":4869,"mtime":1623353813329,"results":"71","hashOfConfig":"57"},{"size":2629,"mtime":1618825461652,"results":"72","hashOfConfig":"57"},{"size":3264,"mtime":1618825461655,"results":"73","hashOfConfig":"57"},{"size":6730,"mtime":1625312089367,"results":"74","hashOfConfig":"57"},{"size":4022,"mtime":1618825461656,"results":"75","hashOfConfig":"57"},{"size":3608,"mtime":1627988605503,"results":"76","hashOfConfig":"57"},{"size":3632,"mtime":1618825461652,"results":"77","hashOfConfig":"57"},{"size":8410,"mtime":1628002208874,"results":"78","hashOfConfig":"57"},{"size":10125,"mtime":1619090468814,"results":"79","hashOfConfig":"57"},{"size":5016,"mtime":1627989573652,"results":"80","hashOfConfig":"57"},{"size":2160,"mtime":1625312077371,"results":"81","hashOfConfig":"57"},{"size":6635,"mtime":1628274998374,"results":"82","hashOfConfig":"57"},{"size":5153,"mtime":1623332926425,"results":"83","hashOfConfig":"57"},{"size":4097,"mtime":1623603720748,"results":"84","hashOfConfig":"57"},{"size":1180,"mtime":1619457756730,"results":"85","hashOfConfig":"57"},{"size":1020,"mtime":1619462108587,"results":"86","hashOfConfig":"57"},{"size":1043,"mtime":1618825461641,"results":"87","hashOfConfig":"57"},{"size":661,"mtime":1619448145502,"results":"88","hashOfConfig":"57"},{"size":887,"mtime":1618825461641,"results":"89","hashOfConfig":"57"},{"size":294,"mtime":1618825461644,"results":"90","hashOfConfig":"57"},{"size":178,"mtime":1619446994205,"results":"91","hashOfConfig":"57"},{"size":1476,"mtime":1623408129423,"results":"92","hashOfConfig":"57"},{"size":479,"mtime":1618825461640,"results":"93","hashOfConfig":"57"},{"size":1856,"mtime":1628263236122,"results":"94","hashOfConfig":"57"},{"size":1957,"mtime":1618825461642,"results":"95","hashOfConfig":"57"},{"size":1836,"mtime":1625219258573,"results":"96","hashOfConfig":"57"},{"size":240,"mtime":1618825461640,"results":"97","hashOfConfig":"57"},{"size":2310,"mtime":1627985997429,"results":"98","hashOfConfig":"57"},{"size":394,"mtime":1618825461639,"results":"99","hashOfConfig":"57"},{"size":2239,"mtime":1627987940835,"results":"100","hashOfConfig":"57"},{"size":9665,"mtime":1628265408613,"results":"101","hashOfConfig":"57"},{"size":10211,"mtime":1628244651809,"results":"102","hashOfConfig":"57"},{"size":1365,"mtime":1618825461634,"results":"103","hashOfConfig":"57"},{"size":9270,"mtime":1625227962136,"results":"104","hashOfConfig":"57"},{"size":1645,"mtime":1618825461638,"results":"105","hashOfConfig":"57"},{"size":693,"mtime":1619456284109,"results":"106","hashOfConfig":"57"},{"size":3647,"mtime":1623159006106,"results":"107","hashOfConfig":"57"},{"size":928,"mtime":1623928508674,"results":"108","hashOfConfig":"57"},{"size":5135,"mtime":1623613158684,"results":"109","hashOfConfig":"57"},{"size":9408,"mtime":1625323096217,"results":"110","hashOfConfig":"57"},{"size":6650,"mtime":1628262630341,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"pteqmp",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"114"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"114"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"114"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"114"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"114"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"114"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"114"},"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\index.js",[],["249","250"],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\store.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\App.js",["251"],"import { Container } from 'react-bootstrap'\r\nimport { HashRouter as Router, Route } from 'react-router-dom'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport HomeScreen from './screens/HomeScreen'\r\nimport ProductScreen from './screens/ProductScreen'\r\nimport CartScreen from './screens/CartScreen'\r\nimport LoginScreen from './screens/LoginScreen'\r\nimport RegisterScreen from './screens/RegisterScreen'\r\nimport ProfileScreen from './screens/ProfileScreen'\r\nimport ShippingScreen from './screens/ShippingScreen'\r\nimport PaymentScreen from './screens/PaymentScreen'\r\nimport PlaceOrderScreen from './screens/PlaceOrderScreen'\r\nimport OrderScreen from './screens/OrderScreen'\r\nimport UserListScreen from './screens/UserListScreen'\r\nimport UserEditScreen from './screens/UserEditScreen'\r\nimport ProductListScreen from './screens/ProductListScreen'\r\nimport ProductEditScreen from './screens/ProductEditScreen'\r\nimport OrderListScreen from './screens/OrderListScreen'\r\nimport CategoryScreen from './screens/CategoryScreen'\r\nimport Dashboard from './screens/Dashboard'\r\nimport MyProducts from './screens/MyProducts'\r\nimport BrandOrder from './screens/BrandOrder'\r\nimport VendorScreen from './screens/VendorScreen'\r\nimport BalancePayScreen from './screens/BalancePayScreen'\r\nimport TweetsScreen from './screens/TweetsScreen'\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header/>\r\n      <Route path='/admin/dashboard' component={Dashboard} />\r\n      <Route path='/admin/tweets' component={TweetsScreen} />\r\n      \r\n      \r\n      <main className=\"py-3\">\r\n      \r\n        <Container>\r\n          <Route path='/' component={HomeScreen} exact />\r\n          <Route path='/login' component={LoginScreen} />\r\n          <Route path='/register' component={RegisterScreen} />\r\n          <Route path='/vendoregister' component={VendorScreen} />\r\n          <Route path='/profile' component={ProfileScreen} />\r\n          <Route path='/shipping' component={ShippingScreen} />\r\n          <Route path='/placeorder' component={PlaceOrderScreen} />\r\n          <Route path='/order/:id' component={BalancePayScreen} /> \r\n          <Route path='/payment' component={PaymentScreen} />\r\n          <Route path='/product/:id' component={ProductScreen} />\r\n          <Route path='/categories' component={CategoryScreen} />\r\n          \r\n          <Route path='/cart/:id?' component={CartScreen} />\r\n\r\n          \r\n          <Route path='/admin/user/:id/edit' component={UserEditScreen} />\r\n          <Route path='/admin/userlist' component={UserListScreen} />       \r\n\r\n          <Route path='/admin/productlist' component={ProductListScreen} />\r\n          <Route path='/admin/product/:id/edit' component={ProductEditScreen} />\r\n          <Route path='/myproducts' component={MyProducts} />\r\n\r\n          <Route path='/admin/orderlist' component={OrderListScreen} />\r\n          <Route path='/admin/brandorders' component={BrandOrder} />\r\n\r\n          \r\n         \r\n        </Container>\r\n      </main>\r\n     \r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\orderReducers.js",["252","253","254"],"import {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_CREATE_RESET,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_MY_BRAND_REQUEST,\r\n    ORDER_MY_BRAND_SUCCESS,\r\n    ORDER_MY_BRAND_FAIL,\r\n\r\n    ORDER_TODAY_REQUEST,\r\n    ORDER_TODAY_SUCCESS,\r\n    ORDER_TODAY_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n\r\n    ORDER_TRANSACTION_REQUEST,\r\n    ORDER_TRANSACTION_SUCCESS,\r\n    ORDER_TRANSACTION_FAIL,\r\n} from '../constants/orderConstants'\r\n\r\n\r\nexport const orderCreateReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_CREATE_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_CREATE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload\r\n            }\r\n\r\n        case ORDER_CREATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_CREATE_RESET:\r\n            return {}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderDetailsReducer = (state = { loading: true, orderItems: [], shippingAddress: {} }, action) => {\r\n    switch (action.type) {\r\n        case ORDER_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                order: action.payload\r\n            }\r\n\r\n        case ORDER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderPayReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_PAY_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_PAY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true\r\n            }\r\n\r\n        case ORDER_PAY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_PAY_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderDeliverReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_DELIVER_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_DELIVER_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true\r\n            }\r\n\r\n        case ORDER_DELIVER_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_DELIVER_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\r\n    switch (action.type) {\r\n        case ORDER_LIST_MY_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_LIST_MY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload\r\n            }\r\n\r\n        case ORDER_LIST_MY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_LIST_MY_RESET:\r\n            return {\r\n                orders: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const orderListReducer = (state = { orders: [] }, action) => {\r\n    switch (action.type) {\r\n        case ORDER_LIST_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload\r\n            }\r\n\r\n        case ORDER_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderListBrandReducer = (state = { orders: [] }, action) => {\r\n    switch (action.type) {\r\n        case  ORDER_MY_BRAND_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case  ORDER_MY_BRAND_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload.products,\r\n                page: action.payload.page,\r\n                pages: action.payload.pages\r\n            }\r\n\r\n        case  ORDER_MY_BRAND_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            default:\r\n                return state\r\n        \r\n    \r\n\r\n}}\r\n\r\nexport const orderListTodayReducer = (state = { orderTodayItems: [] }, action) => {\r\n    switch (action.type) {\r\n        case  ORDER_TODAY_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case  ORDER_TODAY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                todayOrderitems: action.payload.todayOrderitems,\r\n                todayOrderCount: action.payload.todayOrderCount,\r\n              \r\n            }\r\n\r\n        case  ORDER_TODAY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            default:\r\n                return state\r\n        \r\n    \r\n\r\n}}\r\n\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\categoryReducers.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Header.js",["255","256","257"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header() {\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className='py-2 fixed-top' bg=\"light\" variant=\"light\" expand=\"lg\" collapseOnSelect >\r\n                <Container>\r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand>BrandUP</Navbar.Brand>\r\n                    </LinkContainer>\r\n\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <SearchBox />\r\n                        <Nav className=\"ml-auto\">\r\n\r\n                            <LinkContainer to='/cart'>\r\n                                <Nav.Link ><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            {userInfo ? (\r\n                                <NavDropdown title={userInfo.name} id='username'>\r\n                                    <LinkContainer to='/profile'>\r\n                                        <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n\r\n                                </NavDropdown>\r\n                            ) : (\r\n                                    <LinkContainer to='/login'>\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\r\n                                    </LinkContainer>\r\n                                )}\r\n\r\n\r\n                            {userInfo && userInfo.isAdmin && userInfo.name=='admin' && (\r\n                                <NavDropdown title='Admin' id='adminmenue'>\r\n                                    <LinkContainer to='/admin/dashboard'>\r\n                                        <NavDropdown.Item>Dashboard</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n                                    <LinkContainer to='/admin/userlist'>\r\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/productlist'>\r\n                                        <NavDropdown.Item>Products</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/orderlist'>\r\n                                        <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                </NavDropdown>\r\n                            )}\r\n\r\n                            {userInfo && userInfo.isAdmin && userInfo.name !='admin' && (\r\n                                <NavDropdown title='Admin' id='adminmenue'>\r\n                                    <LinkContainer to='/admin/dashboard'>\r\n                                        <NavDropdown.Item>Dashboard</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n                                    <LinkContainer to='/admin/userlist'>\r\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/myproducts'>\r\n                                        <NavDropdown.Item>Products</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/orderlist'>\r\n                                        <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                </NavDropdown>\r\n                            )}\r\n\r\n\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\HomeScreen.js",["258","259"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Header from '../components/Header'\r\nimport BecomeVendor from '../components/BecomeVendor'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const productList = useSelector(state => state.productList)\r\n    const { error, loading, products, page, pages } = productList\r\n    \r\n    let keyword = history.location.search\r\n\r\n    \r\n    useEffect(() => {\r\n        dispatch(listProducts(keyword))\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            \r\n            <BecomeVendor/>\r\n            {!keyword && <ProductCarousel />}\r\n            \r\n            \r\n            <h1>Latest Products</h1>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                            {products.map(product => (\r\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Product product={product} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductScreen.js",["260"],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProfileScreen.js",["261","262"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile,getUserBalance } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userBalance = useSelector(state => state.userBalance)\r\n    const { balance } = userBalance\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(getUserBalance())\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row className='mt-5'>\r\n            <Col md={3}>\r\n                <h2 className='text-capitalize m-2'>User Profile</h2>\r\n                    <div className='border text-center py-3 mb-2'> <h5 className='text-capitalize text-info'>Current balance</h5><p className='h5 text-center'>${balance} </p>\r\n                    </div>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Paid</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order._id}>\r\n                                            <td>{order._id}</td>\r\n                                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                                            <td>${order.totalPrice}</td>\r\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order._id}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ShippingScreen.js",["263"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter city'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter postal code'\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js",["264","265"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\UserEditScreen.js",["266"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\UserListScreen.js",["267"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n  \r\n            <h1>Users</h1>\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderListScreen.js",["268"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductEditScreen.js",["269","270","271","272","273"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [image, setImage] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    const [uploading, setUploading] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { error, loading, product } = productDetails\r\n\r\n    const productUpdate = useSelector(state => state.productUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: PRODUCT_UPDATE_RESET })\r\n            {userInfo && userInfo.isAdmin && userInfo.name !='admin' && history.push('/myproducts')}\r\n            {userInfo && userInfo.isAdmin && userInfo.name =='admin' && history.push('/admin/productlist')}\r\n        } else {\r\n            if (!product.name || product._id !== Number(productId)) {\r\n                dispatch(listProductDetails(productId))\r\n            } else {\r\n                setName(product.name)\r\n                setPrice(product.price)\r\n                setImage(product.image)\r\n                setBrand(product.brand)\r\n                setCategory(product.category)\r\n                setCountInStock(product.countInStock)\r\n                setDescription(product.description)\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }, [dispatch, product, productId, history, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateProduct({\r\n            _id: productId,\r\n            name,\r\n            price,\r\n            image,\r\n            brand,\r\n            category,\r\n            countInStock,\r\n            description\r\n        }))\r\n    }\r\n\r\n    const uploadFileHandler = async (e) => {\r\n        const file = e.target.files[0]\r\n        const formData = new FormData()\r\n\r\n        formData.append('image', file)\r\n        formData.append('product_id', productId)\r\n\r\n        setUploading(true)\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.post('/api/products/upload/', formData, config)\r\n\r\n\r\n            setImage(data)\r\n            setUploading(false)\r\n\r\n        } catch (error) {\r\n            setUploading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/productlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit Product</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='price'>\r\n                                <Form.Label>Price</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='number'\r\n                                    placeholder='Enter price'\r\n                                    value={price}\r\n                                    onChange={(e) => setPrice(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n\r\n                            <Form.Group controlId='image'>\r\n                                <Form.Label>Image</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter image'\r\n                                    value={image}\r\n                                    onChange={(e) => setImage(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n\r\n                                <Form.File\r\n                                    id='image-file'\r\n                                    label='Choose File'\r\n                                    custom\r\n                                    onChange={uploadFileHandler}\r\n                                >\r\n\r\n                                </Form.File>\r\n                                {uploading && <Loader />}\r\n\r\n                            </Form.Group>\r\n\r\n\r\n                            <Form.Group controlId='brand'>\r\n                                <Form.Label>Brand</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter brand'\r\n                                    value={brand}\r\n                                    onChange={(e) => setBrand(e.target.value)} readOnly\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='countinstock'>\r\n                                <Form.Label>Stock</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='number'\r\n                                    placeholder='Enter stock'\r\n                                    value={countInStock}\r\n                                    onChange={(e) => setCountInStock(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='category'>\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter category'\r\n                                    value={category}\r\n                                    onChange={(e) => setCategory(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='description'>\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter description'\r\n                                    value={description}\r\n                                    onChange={(e) => setDescription(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProductEditScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderScreen.js",["274"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    }\r\n\r\n\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\r\n        script.async = true\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch({ type: ORDER_DELIVER_RESET })\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n                <div>\r\n                    <h1>Order: {order._id}</h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p><strong>Name: </strong> {order.user.name}</p>\r\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                                    <p>\r\n                                        <strong>Shipping: </strong>\r\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\r\n                                        {'  '}\r\n                                        {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                        {order.shippingAddress.country}\r\n                                    </p>\r\n\r\n                                    {order.isDelivered ? (\r\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Delivered</Message>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method</h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {order.isPaid ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Paid</Message>\r\n                                        )}\r\n\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                        Order is empty\r\n                            </Message> : (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.orderItems.map((item, index) => (\r\n                                                    <ListGroup.Item key={index}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4}>\r\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items:</Col>\r\n                                            <Col>${order.itemsPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping:</Col>\r\n                                            <Col>${order.shippingPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax:</Col>\r\n                                            <Col>${order.taxPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total:</Col>\r\n                                            <Col>${order.totalPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n\r\n                                    {!order.isPaid && (\r\n                                        <ListGroup.Item>\r\n                                            {loadingPay && <Loader />}\r\n\r\n                                            {!sdkReady ? (\r\n                                                <Loader />\r\n                                            ) : (\r\n                                                    <PayPalButton\r\n                                                        amount={order.totalPrice}\r\n                                                        onSuccess={successPaymentHandler}\r\n                                                    />\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                </ListGroup>\r\n                                {loadingDeliver && <Loader />}\r\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                    <ListGroup.Item>\r\n                                        <Button\r\n                                            type='button'\r\n                                            className='btn btn-block'\r\n                                            onClick={deliverHandler}\r\n                                        >\r\n                                            Mark As Delivered\r\n                                        </Button>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n}\r\n\r\nexport default OrderScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductListScreen.js",["275"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div className='mt-5'>\r\n            <Row className='align-items-center'>\r\n                \r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>NAME</th>\r\n                                        <th>PRICE</th>\r\n                                        <th>BRAND</th>\r\n\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {products.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td>{product._id}</td>\r\n                                            <td>{product.name}</td>\r\n                                            <td>${product.price}</td>\r\n                                            <td>{product.brand}</td>\r\n                            \r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\PaymentScreen.js",["276"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    if (!shippingAddress.address) {\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Method</Form.Label>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type='radio'\r\n                            label='PayPal or Credit Card'\r\n                            id='paypal'\r\n                            name='paymentMethod'\r\n                            checked\r\n                            onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        >\r\n\r\n                        </Form.Check>\r\n                        <Form.Check\r\n                            type='radio'\r\n                            label='Wallet'\r\n                            id='Wallet'\r\n                            name='paymentMethod'\r\n                            checked\r\n                            onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        >\r\n\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\Dashboard.js",["277","278","279","280","281","282","283","284","285","286"],"\r\nimport  Sidebar  from '../components/Sidebar'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form, Table, Container} from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listMyProducts,positiveReview } from '../actions/productActions'\r\nimport { TodayOrders } from '../actions/orderActions'\r\n\r\nfunction Dashboard({history}) {\r\n    const dispatch = useDispatch()\r\n    const positiveReviews = useSelector(state => state.positiveReviews)\r\n    const { posreviews,positiveCount,negreviews,negativeCount } = positiveReviews\r\n    const orderListToday = useSelector(state => state.orderListToday)\r\n    const { todayOrderitems, todayOrderCount  } = orderListToday\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    var options = {        \r\n      cutout: 100,\r\n    }\r\n    const data = {\r\n     \r\n        labels: ['Negative', 'Positive'],\r\n        datasets: [\r\n          {\r\n            label: '# of Votes',\r\n            data: [negativeCount,positiveCount],\r\n            backgroundColor: [\r\n              'rgba(232, 40, 49, 1)',\r\n              'rgba(99, 212, 122, 1)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(99, 212, 122, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n    \r\n    useEffect(() => {\r\n        \r\n        if (userInfo && userInfo.isAdmin) {\r\n            \r\n            dispatch(positiveReview())\r\n\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n    useEffect(() => {\r\n        \r\n      if (userInfo && userInfo.isAdmin) {\r\n          \r\n          dispatch(TodayOrders())\r\n\r\n      } else {\r\n          history.push('/login')\r\n      }\r\n\r\n  }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor: \"#edf2fb\"}} className=\"flex h-screen overflow-hidden\">\r\n        <Row >\r\n           \r\n            \r\n            <Col className='text-md-center' md={2.5} >\r\n        <Sidebar />\r\n        </Col>\r\n        <Container >\r\n        <Col md={{  offset: 2 }}>\r\n        <h3 className='mt-5 pt-5 text-capitalize'>Hello There,{userInfo && userInfo.name}</h3>\r\n        <p>Here is some information we gathered about your store</p>\r\n         {/* Cards */}\r\n         <div className=\"grid grid-cols-12 gap-6\">\r\n\r\n\r\n</div>\r\n        <Row ><Col md={3}><Card className=' bg-white shadow rounded-sm border border-gray-200 mb-3'><ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                        <h4 className='text-capitalize'>Orders</h4>\r\n                        <p>Today</p>\r\n                        <h4 className='text-center'>{todayOrderCount}</h4>\r\n                        \r\n                        \r\n                        </ListGroup.Item></ListGroup>\r\n            \r\n                        </Card></Col>\r\n                        <Col md={3}><Card className='bg-white shadow rounded-sm border border-gray-200 mb-3'><ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                        <h4 className='text-capitalize'>Sales</h4>\r\n                        <p>Today</p>\r\n                        <h4 className='text-center'>2123</h4>\r\n                        \r\n                        \r\n                        </ListGroup.Item></ListGroup>\r\n            \r\n                        </Card></Col></Row>\r\n                        <Row>\r\n<div className=\"grid grid-cols-12 gap-6\">\r\n<div className=\"flex flex-col col-span-full sm:col-span-6 xl:col-span-4 bg-white shadow rounded-sm border border-gray-200\">\r\n< Doughnut data={data} options={options} />\r\n</div>\r\n</div>\r\n</Row>\r\n    <div className='w-50 '>\r\n<h4 className='text-capitalize mt-4'>Reviews</h4>\r\n<div >\r\n<Table striped bordered hover responsive className='table-sm table bg-white shadow rounded-sm border border-gray-200 mb-3'>\r\n                                <thead>\r\n                                    <tr  className='fit'>\r\n                                        <th>Customer</th>\r\n                                        <th>Product</th>\r\n                                        <th>Review</th>\r\n                                        <th>Created at</th>\r\n                                        <th>sentiment</th>\r\n                                       \r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                { negreviews && negreviews.map((review) => (\r\n                                        <tr key={review._id}>\r\n                                             <td className='fit'>{review.user.name}</td>\r\n                                            <td className='fit'>{review.product}</td>\r\n                                            <td className='fit'>{review.comment}</td>\r\n                                            <td className='fit'>{review.createdAt.substring(0,10)}</td>\r\n                                            <td className='fit text-danger col-md-1'>{review.sentiment}</td>\r\n                                            </tr> ))}\r\n                                { posreviews && posreviews.map((review) => (\r\n                                        <tr className='fit' key={review._id}>\r\n                                             <td>{review.user.name}</td>\r\n                                            <td className='fit'>{review.product}</td>\r\n                                            <td className='fit'>{review.comment}</td>\r\n                                            <td>{review.createdAt.substring(0,10)}</td>\r\n                                            <td className='text-success'>{review.sentiment}</td>\r\n                                            </tr> ))}\r\n                               \r\n                                            </tbody>\r\n                                    \r\n                                            \r\n                                             \r\n                                              </Table>\r\n                                              </div>\r\n                                              </div>\r\n                                              \r\n                                     \r\n        </Col>\r\n        \r\n        </Container>\r\n        </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\MyProducts.js",["287","288"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listMyProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productListMy = useSelector(state => state.productListMy)\r\n    const { loading, error, products } = productListMy\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listMyProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div  className='mt-5'>\r\n            <Row className='align-items-center'>\r\n                \r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>NAME</th>\r\n                                        <th>PRICE</th>\r\n                                        <th>CATEGORY</th>\r\n                                        <th>BRAND</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {products && products.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td>{product._id}</td>\r\n                                            <td>{product.name}</td>\r\n                                            <td>${product.price}</td>\r\n                                            <td>{product.category}</td>\r\n                                            <td>{product.brand}</td>\r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            \r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n    \r\n    ","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\RegisterScreen.js",["289","290"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name, email, password,isAdmin))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\CategoryScreen.js",["291","292","293","294","295"],"import React, { useState, useEffect } from 'react'\r\nimport Category from '../components/Category'\r\nimport { listCategory } from '../actions/categoryActions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nfunction CategoryScreen() {\r\n    const dispatch = useDispatch()\r\n    const categoryList = useSelector(state => state.categoryList)\r\n    const { error, loading,categories } = categoryList\r\n    useEffect(() => {\r\n        dispatch(listCategory())\r\n\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            <h1>Categories</h1>\r\n                    <div>\r\n                        <Row>\r\n                            {categories.map(category => (\r\n                                <Col key={category.id} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Category category={category} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        \r\n                    </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CategoryScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\SearchBox.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Product.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Category.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\categoryConstants.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\ProductCarousel.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Message.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\Sidebar.js",["296","297","298","299","300"],"\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nfunction Sidebar() {\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { userInfo } = userLogin\r\n    return (\r\n        <div className='fixed-left'>\r\n        <Navbar  bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n            \r\n        <Nav className=\"flex-column mx-5 \">\r\n        <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n   \r\n    <LinkContainer to='/admin/dashboard'>\r\n  <Nav.Link  href=\"/home\">Dashboard</Nav.Link></LinkContainer>\r\n  {userInfo && userInfo.isAdmin && userInfo.name=='admin' && (\r\n  <LinkContainer to='/admin/userlist'>\r\n  <Nav.Link  >Users</Nav.Link></LinkContainer>)}\r\n  <LinkContainer to='/admin/productlist'>\r\n  <Nav.Link >Products</Nav.Link></LinkContainer>\r\n  \r\n  <LinkContainer to='/admin/tweets'>\r\n  <Nav.Link eventKey=\"link-2\">Twitter Reviews</Nav.Link></LinkContainer>\r\n  <Nav.Link eventKey=\"disabled\" disabled>\r\n    Disabled\r\n  </Nav.Link>\r\n  <Nav.Link eventKey=\"disabled\" disabled>\r\n  </Nav.Link>\r\n  <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n  </Nav.Link>\r\n  <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n  </Nav.Link>\r\n  <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n    <Nav.Link eventKey=\"disabled\" disabled>\r\n    \r\n    </Nav.Link>\r\n \r\n\r\n</Nav>\r\n</Navbar>\r\n\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\userActions.js",["301"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_BALANCE_REQUEST,\r\n    USER_BALANCE_SUCCESS,\r\n    USER_BALANCE_FAIL,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n    BRAND_RATE_REQUEST,\r\n    BRAND_RATE_SUCCESS,\r\n    BRAND_RATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\n\r\nexport const register = (name, email, password,isAdmin) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password ,'isAdmin':isAdmin},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserBalance = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_BALANCE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/balance/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_BALANCE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_BALANCE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getBrandRate = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: BRAND_RATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/rate/${id}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: BRAND_RATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: BRAND_RATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\productActions.js",["302"],"import axios from 'axios'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_POSITIVE_REQUEST,\r\n    PRODUCT_POSITIVE_SUCCESS,\r\n    PRODUCT_POSITIVE_FAIL,\r\n\r\n    PRODUCT_TWITTER_REQUEST,\r\n    PRODUCT_TWITTER_SUCCESS,\r\n    PRODUCT_TWITTER_FAIL,\r\n\r\n    PRODUCT_BRAND_REQUEST,\r\n    PRODUCT_BRAND_SUCCESS,\r\n    PRODUCT_BRAND_FAIL,\r\n\r\n    PRODUCT_LIST_MY_REQUEST,\r\n    PRODUCT_LIST_MY_SUCCESS,\r\n    PRODUCT_LIST_MY_FAIL,\r\n\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products${keyword}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    \r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listMyProducts = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/products/myproducts/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            review,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listBrandProducts = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_BRAND_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/brands/${id}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_BRAND_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_BRAND_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }}\r\n\r\nexport const positiveReview = () => async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: PRODUCT_POSITIVE_REQUEST\r\n            })\r\n    \r\n            const {\r\n                userLogin: { userInfo },\r\n            } = getState()\r\n    \r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n    \r\n            const { data } = await axios.get(\r\n                `/api/products/pos/`,\r\n                config\r\n            )\r\n    \r\n            dispatch({\r\n                type: PRODUCT_POSITIVE_SUCCESS,\r\n                payload: data\r\n            })\r\n    \r\n    \r\n        } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_POSITIVE_FAIL,\r\n                payload: error.response && error.response.data.detail\r\n                    ? error.response.data.detail\r\n                    : error.message,\r\n            })\r\n        }\r\n    }\r\n\r\n    export const twitterReview = (day,month,year) => async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: PRODUCT_TWITTER_REQUEST\r\n            })\r\n    \r\n            const {\r\n                userLogin: { userInfo },\r\n            } = getState()\r\n    \r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n    \r\n            const { data } = await axios.post(\r\n                '/api/products/twitter/reviews/brand/',\r\n                { 'year': year, 'month': month,'day':day },\r\n                config\r\n            )\r\n    \r\n            dispatch({\r\n                type: PRODUCT_TWITTER_SUCCESS,\r\n                payload: data\r\n            })\r\n           \r\n\r\n    \r\n        } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_TWITTER_FAIL,\r\n                payload: error.response && error.response.data.detail\r\n                    ? error.response.data.detail\r\n                    : error.message,\r\n            })\r\n        }\r\n    }","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\orderActions.js",["303","304","305"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_TODAY_REQUEST,\r\n    ORDER_TODAY_SUCCESS,\r\n    ORDER_TODAY_FAIL,\r\n\r\n    ORDER_MY_BRAND_REQUEST,\r\n    ORDER_MY_BRAND_SUCCESS,\r\n    ORDER_MY_BRAND_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n\r\n    ORDER_TRANSACTION_REQUEST,\r\n    ORDER_TRANSACTION_SUCCESS,\r\n    ORDER_TRANSACTION_FAIL,\r\n} from '../constants/orderConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`,\r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/myorders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const BrandOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_MY_BRAND_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/brandorder/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_MY_BRAND_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_MY_BRAND_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const TodayOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_TODAY_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/todayorder/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_TODAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_TODAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createTransaction = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_TRANSACTION_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/trans/`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_TRANSACTION_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_TRANSACTION_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\actions\\categoryActions.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\BrandOrder.js",["306"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { BrandOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderBrand = useSelector(state => state.orderBrand)\r\n    const { loading, error, orders } = orderBrand\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(BrandOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders && orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\components\\BecomeVendor.js",[],"C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\VendorScreen.js",["307","308","309","310"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col,Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register} from '../actions/userActions'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Capture from '../Capture.PNG'\r\n\r\nfunction VendorScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(true)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name, email, password,isAdmin))\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='mt-5'>\r\n            <Row>\r\n            <Col className='mt-5 pt-4 w-50'>\r\n        <p className='text-capitalize pt-5 pb-2 h2'>Improve customer satisfaction</p>\r\n        <p >Track & engage reviews, social media mentions and much more.</p>\r\n        <p className='text-capitalize pt-4 h5'>Get to know your customers</p>\r\n        <p>Learn what people like or dislike about your company to improve communication.</p>\r\n        <p className='text-capitalize pt-4 h5'>Engage customers online</p>\r\n        <p>Access and engage reviews and online mentions to grow customer satisfaction.</p>\r\n        <LinkContainer to={'/vendoregister/'}>\r\n        <Button variant=\"info\" className='btn-text text-capitalize rounded my-4'>Become a Vendor</Button>\r\n            </LinkContainer>\r\n        </Col>\r\n        <Col className='mt-5 pt-3 w-50 '>\r\n        <img src={Capture} />\r\n        </Col>\r\n        </Row>\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n            \r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    </div>)\r\n}\r\n\r\nexport default VendorScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\BalancePayScreen.js",["311","312"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getOrderDetails, payOrder, deliverOrder,createTransaction } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\nfunction BalancePayScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch({ type: ORDER_DELIVER_RESET })\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n           \r\n            }\r\n        \r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n\r\n\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    const payHandler = () => {\r\n        dispatch(createTransaction(order))\r\n        dispatch(payOrder(orderId, true))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n                <div>\r\n                    <h1>Order: {order._id}</h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p><strong>Name: </strong> {order.user.name}</p>\r\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                                    <p>\r\n                                        <strong>Shipping: </strong>\r\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\r\n                                        {'  '}\r\n                                        {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                        {order.shippingAddress.country}\r\n                                    </p>\r\n\r\n                                    {order.isDelivered ? (\r\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Delivered</Message>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method</h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {order.isPaid ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Paid</Message>\r\n                                        )}\r\n\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                        Order is empty\r\n                            </Message> : (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.orderItems.map((item, index) => (\r\n                                                    <ListGroup.Item key={index}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4}>\r\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items:</Col>\r\n                                            <Col>${order.itemsPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping:</Col>\r\n                                            <Col>${order.shippingPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax:</Col>\r\n                                            <Col>${order.taxPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total:</Col>\r\n                                            <Col>${order.totalPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n\r\n                                    {!order.isPaid && (\r\n                                        <ListGroup.Item>\r\n                                            {loadingPay && <Loader />}\r\n\r\n                                            \r\n                                                    <Button\r\n                                                        onClick={payHandler}\r\n                                                    >\r\n                                                        Pay\r\n                                                        </Button>\r\n                                                \r\n                                        </ListGroup.Item>\r\n                                  ) }\r\n                                </ListGroup>\r\n                                {loadingDeliver && <Loader />}\r\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                    <ListGroup.Item>\r\n                                        <Button\r\n                                            type='button'\r\n                                            className='btn btn-block'\r\n                                            onClick={deliverHandler}\r\n                                        >\r\n                                            Mark As Delivered\r\n                                        </Button>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n}\r\n\r\n\r\nexport default BalancePayScreen\r\n","C:\\Users\\96395\\Desktop\\ecommerce\\frontend\\src\\screens\\TweetsScreen.js",["313","314","315","316","317"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport  Sidebar  from '../components/Sidebar'\r\nimport {twitterReview} from '../actions/productActions'\r\nimport { useState, useEffect } from 'react'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Data from '../export.json'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form, Table, Container} from 'react-bootstrap'\r\nfunction TweetsScreen({ location, history }) {\r\n    const [year, setYear] = useState('2021')\r\n    const [month, setMonth] = useState('8')\r\n    const [day, setDay] = useState('1')\r\n    const dispatch = useDispatch()\r\n    const twitterReviews = useSelector(state => state.twitterReviews)\r\n    const { loading,error } = twitterReviews\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n            dispatch(twitterReview(day,month,year))\r\n        }\r\n    return (\r\n        <div  className=\"flex h-screen overflow-hidden mt-3 pt-5\">\r\n        \r\n        <Row >\r\n           \r\n            \r\n            <Col className='text-md-center' md={2.5} >\r\n        <Sidebar />\r\n        </Col>\r\n        <FormContainer >\r\n            <h4 className='mt-5'>Get tweets from Date:</h4>\r\n        <Form onSubmit={submitHandler} inline className='mt-4'>\r\n        <Col md={{  span:1 }}>\r\n        <Form.Group controlId=\"day\">\r\n        <Form.Label>Day</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={day}\r\n          onChange={(e) => setDay(e.target.value) } >\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"11\">11</option>\r\n          <option value=\"12\">12</option>\r\n          <option value=\"13\">13</option>\r\n          <option value=\"14\">14</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"16\">16</option>\r\n          <option value=\"17\">17</option>\r\n          <option value=\"18\">18</option>\r\n          <option value=\"19\">19</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"21\">21</option>\r\n          <option value=\"22\">22</option>\r\n          <option value=\"23\">23</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"25\">25</option>\r\n          <option value=\"26\">26</option>\r\n          <option value=\"27\">27</option>\r\n          <option value=\"28\">28</option>\r\n          <option value=\"29\">29</option>\r\n          <option value=\"30\">30</option>\r\n          <option value=\"31\">31</option>\r\n\r\n        </Form.Control>\r\n      </Form.Group>\r\n</Col>\r\n<Col className='ml-5' md={{  span:1 }}>\r\n        <Form.Group controlId=\"month\">\r\n        <Form.Label>Month</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={month}\r\n          onChange={(e) =>  setMonth(e.target.value)}\r\n        >\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"11\">11</option>\r\n          <option value=\"12\">12</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n      </Col>\r\n      <Col className='ml-5' md={{  span:2}}>\r\n        <Form.Group controlId=\"year\">\r\n        <Form.Label>Year</Form.Label>\r\n        <Form.Control\r\n          as='select'\r\n          value={year}\r\n          onChange={e => { setYear(e.target.value);\r\n            \r\n          }}\r\n        >\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n          <option value=\"2019\">2018</option>\r\n          <option value=\"2019\">2017</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n</Col>\r\n        \r\n      <Col className='ml-5 mt-4' md={7} >\r\n                    <Button variant='outline-info ' type='submit'>\r\n                    <i className=\"fab fa-twitter fa-2x\" style={{color:'blue'}}></i> Get Twitter reviews\r\n                    </Button></Col>\r\n                    </Form> \r\n                   </FormContainer>        \r\n      \r\n          {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n       <Col md={{offset:3}} >\r\n       \r\n        <Container className=' mt-4'>\r\n        <Table striped bordered hover responsive className='table-sm table bg-white shadow rounded-sm border border-gray-200 mb-3'>\r\n                                <thead>\r\n                                    <tr  className='fit'>\r\n                                        <th>User</th>\r\n                                        <th>Tweet</th>\r\n                                        <th>sentiment</th>\r\n                                        <th>Created At</th>\r\n                                       \r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                \r\n                             {Data.map(tweet => {\r\n                               return(\r\n                                <tr key={tweet.Unnamed}>\r\n                                <td className='fit'>{tweet.user }</td>\r\n                               <td >{tweet.tweet}</td>\r\n                              {tweet.class ==[1]?  <td className='fit font-weight-bold' style={{ color: 'green', }}>Positive</td>: <td className='fit font-weight-bold' style={{ color: 'red', }}>Negative</td>}\r\n                               <td className='fit'>{tweet.createdAt.substring(0,10)}</td>\r\n                                                           </tr>\r\n                               )\r\n                             })}\r\n                               \r\n                                            </tbody>\r\n                                    \r\n                                            \r\n                                             \r\n                                              </Table>\r\n        </Container>\r\n        </Col>}\r\n        </Row>\r\n        </div>\r\n                            \r\n    )\r\n}\r\n\r\nexport default TweetsScreen\r\n",{"ruleId":"318","replacedBy":"319"},{"ruleId":"320","replacedBy":"321"},{"ruleId":"322","severity":1,"message":"323","line":14,"column":8,"nodeType":"324","messageId":"325","endLine":14,"endColumn":19},{"ruleId":"322","severity":1,"message":"326","line":39,"column":5,"nodeType":"324","messageId":"325","endLine":39,"endColumn":30},{"ruleId":"322","severity":1,"message":"327","line":40,"column":5,"nodeType":"324","messageId":"325","endLine":40,"endColumn":30},{"ruleId":"322","severity":1,"message":"328","line":41,"column":5,"nodeType":"324","messageId":"325","endLine":41,"endColumn":27},{"ruleId":"322","severity":1,"message":"329","line":3,"column":34,"nodeType":"324","messageId":"325","endLine":3,"endColumn":37},{"ruleId":"330","severity":1,"message":"331","line":52,"column":75,"nodeType":"332","messageId":"333","endLine":52,"endColumn":77},{"ruleId":"330","severity":1,"message":"334","line":72,"column":76,"nodeType":"332","messageId":"333","endLine":72,"endColumn":78},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"336","line":7,"column":8,"nodeType":"324","messageId":"325","endLine":7,"endColumn":14},{"ruleId":"330","severity":1,"message":"331","line":153,"column":84,"nodeType":"332","messageId":"333","endLine":153,"endColumn":86},{"ruleId":"322","severity":1,"message":"337","line":2,"column":10,"nodeType":"324","messageId":"325","endLine":2,"endColumn":14},{"ruleId":"330","severity":1,"message":"334","line":57,"column":22,"nodeType":"332","messageId":"333","endLine":57,"endColumn":24},{"ruleId":"322","severity":1,"message":"338","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"339","severity":1,"message":"340","line":35,"column":8,"nodeType":"341","endLine":35,"endColumn":26,"suggestions":"342"},{"ruleId":"339","severity":1,"message":"343","line":43,"column":8,"nodeType":"341","endLine":43,"endColumn":46,"suggestions":"344"},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":41,"column":13,"nodeType":"347","messageId":"348","endLine":41,"endColumn":101},{"ruleId":"330","severity":1,"message":"334","line":41,"column":60,"nodeType":"332","messageId":"333","endLine":41,"endColumn":62},{"ruleId":"345","severity":1,"message":"346","line":42,"column":13,"nodeType":"347","messageId":"348","endLine":42,"endColumn":108},{"ruleId":"330","severity":1,"message":"331","line":42,"column":60,"nodeType":"332","messageId":"333","endLine":42,"endColumn":62},{"ruleId":"339","severity":1,"message":"349","line":60,"column":8,"nodeType":"341","endLine":60,"endColumn":62,"suggestions":"350"},{"ruleId":"339","severity":1,"message":"351","line":65,"column":8,"nodeType":"341","endLine":65,"endColumn":62,"suggestions":"352"},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"338","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"335","line":4,"column":17,"nodeType":"324","messageId":"325","endLine":4,"endColumn":25},{"ruleId":"322","severity":1,"message":"337","line":6,"column":10,"nodeType":"324","messageId":"325","endLine":6,"endColumn":14},{"ruleId":"322","severity":1,"message":"353","line":7,"column":20,"nodeType":"324","messageId":"325","endLine":7,"endColumn":25},{"ruleId":"322","severity":1,"message":"354","line":7,"column":38,"nodeType":"324","messageId":"325","endLine":7,"endColumn":44},{"ruleId":"322","severity":1,"message":"355","line":7,"column":52,"nodeType":"324","messageId":"325","endLine":7,"endColumn":56},{"ruleId":"322","severity":1,"message":"356","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":14},{"ruleId":"322","severity":1,"message":"357","line":9,"column":8,"nodeType":"324","messageId":"325","endLine":9,"endColumn":14},{"ruleId":"322","severity":1,"message":"358","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":15},{"ruleId":"322","severity":1,"message":"359","line":11,"column":10,"nodeType":"324","messageId":"325","endLine":11,"endColumn":24},{"ruleId":"322","severity":1,"message":"360","line":19,"column":13,"nodeType":"324","messageId":"325","endLine":19,"endColumn":28},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"361","line":7,"column":8,"nodeType":"324","messageId":"325","endLine":7,"endColumn":16},{"ruleId":"322","severity":1,"message":"362","line":17,"column":21,"nodeType":"324","messageId":"325","endLine":17,"endColumn":31},{"ruleId":"330","severity":1,"message":"334","line":35,"column":22,"nodeType":"332","messageId":"333","endLine":35,"endColumn":24},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"357","line":6,"column":8,"nodeType":"324","messageId":"325","endLine":6,"endColumn":14},{"ruleId":"322","severity":1,"message":"358","line":7,"column":8,"nodeType":"324","messageId":"325","endLine":7,"endColumn":15},{"ruleId":"322","severity":1,"message":"363","line":11,"column":13,"nodeType":"324","messageId":"325","endLine":11,"endColumn":18},{"ruleId":"322","severity":1,"message":"364","line":11,"column":20,"nodeType":"324","messageId":"325","endLine":11,"endColumn":27},{"ruleId":"322","severity":1,"message":"365","line":4,"column":10,"nodeType":"324","messageId":"325","endLine":4,"endColumn":21},{"ruleId":"322","severity":1,"message":"366","line":5,"column":23,"nodeType":"324","messageId":"325","endLine":5,"endColumn":32},{"ruleId":"322","severity":1,"message":"329","line":5,"column":34,"nodeType":"324","messageId":"325","endLine":5,"endColumn":37},{"ruleId":"322","severity":1,"message":"367","line":5,"column":39,"nodeType":"324","messageId":"325","endLine":5,"endColumn":50},{"ruleId":"330","severity":1,"message":"331","line":33,"column":49,"nodeType":"332","messageId":"333","endLine":33,"endColumn":51},{"ruleId":"322","severity":1,"message":"368","line":25,"column":5,"nodeType":"324","messageId":"325","endLine":25,"endColumn":30},{"ruleId":"322","severity":1,"message":"369","line":171,"column":17,"nodeType":"324","messageId":"325","endLine":171,"endColumn":21},{"ruleId":"322","severity":1,"message":"370","line":22,"column":5,"nodeType":"324","messageId":"325","endLine":22,"endColumn":20},{"ruleId":"322","severity":1,"message":"371","line":27,"column":5,"nodeType":"324","messageId":"325","endLine":27,"endColumn":24},{"ruleId":"322","severity":1,"message":"372","line":36,"column":5,"nodeType":"324","messageId":"325","endLine":36,"endColumn":24},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"353","line":3,"column":33,"nodeType":"324","messageId":"325","endLine":3,"endColumn":38},{"ruleId":"322","severity":1,"message":"362","line":19,"column":21,"nodeType":"324","messageId":"325","endLine":19,"endColumn":31},{"ruleId":"330","severity":1,"message":"334","line":37,"column":22,"nodeType":"332","messageId":"333","endLine":37,"endColumn":24},{"ruleId":"373","severity":1,"message":"374","line":61,"column":9,"nodeType":"375","endLine":61,"endColumn":30},{"ruleId":"322","severity":1,"message":"335","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"339","severity":1,"message":"351","line":49,"column":8,"nodeType":"341","endLine":49,"endColumn":62,"suggestions":"376"},{"ruleId":"322","severity":1,"message":"338","line":5,"column":20,"nodeType":"324","messageId":"325","endLine":5,"endColumn":29},{"ruleId":"322","severity":1,"message":"353","line":11,"column":20,"nodeType":"324","messageId":"325","endLine":11,"endColumn":25},{"ruleId":"322","severity":1,"message":"377","line":11,"column":27,"nodeType":"324","messageId":"325","endLine":11,"endColumn":36},{"ruleId":"322","severity":1,"message":"378","line":11,"column":46,"nodeType":"324","messageId":"325","endLine":11,"endColumn":50},{"ruleId":"330","severity":1,"message":"331","line":151,"column":44,"nodeType":"332","messageId":"333","endLine":151,"endColumn":46},"no-native-reassign",["379"],"no-negated-in-lhs",["380"],"no-unused-vars","'OrderScreen' is defined but never used.","Identifier","unusedVar","'ORDER_TRANSACTION_REQUEST' is defined but never used.","'ORDER_TRANSACTION_SUCCESS' is defined but never used.","'ORDER_TRANSACTION_FAIL' is defined but never used.","'Row' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'Header' is defined but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["381"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["382"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["383"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["384"],"'Image' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'Rating' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","'listMyProducts' is defined but never used.","'todayOrderitems' is assigned a value but never used.","'Paginate' is defined but never used.","'setIsAdmin' is assigned a value but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'useDispatch' is defined but never used.","'Container' is defined but never used.","'NavDropdown' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["385"],"'ListGroup' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"392","fix":"394"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"395","text":"396"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"397","text":"398"},"Update the dependencies array to be: [dispatch, product, productId, history, successUpdate, userInfo]",{"range":"399","text":"400"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"401","text":"402"},{"range":"403","text":"402"},[1302,1320],"[success, history, order._id, dispatch]",[1474,1512],"[user, userId, successUpdate, history, dispatch]",[2289,2343],"[dispatch, product, productId, history, successUpdate, userInfo]",[2336,2390],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1700,1754]]